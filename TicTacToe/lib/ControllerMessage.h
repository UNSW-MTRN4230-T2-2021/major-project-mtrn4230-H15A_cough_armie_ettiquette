// Generated by gencpp from file project/ControllerMessage.msg
// DO NOT EDIT!


#ifndef PROJECT_MESSAGE_CONTROLLERMESSAGE_H
#define PROJECT_MESSAGE_CONTROLLERMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project
{
template <class ContainerAllocator>
struct ControllerMessage_
{
  typedef ControllerMessage_<ContainerAllocator> Type;

  ControllerMessage_()
    : gameWinner(0)
    , playerId(0)
    , setWinners()  {
    }
  ControllerMessage_(const ContainerAllocator& _alloc)
    : gameWinner(0)
    , playerId(0)
    , setWinners(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _gameWinner_type;
  _gameWinner_type gameWinner;

   typedef int8_t _playerId_type;
  _playerId_type playerId;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _setWinners_type;
  _setWinners_type setWinners;





  typedef boost::shared_ptr< ::project::ControllerMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project::ControllerMessage_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerMessage_

typedef ::project::ControllerMessage_<std::allocator<void> > ControllerMessage;

typedef boost::shared_ptr< ::project::ControllerMessage > ControllerMessagePtr;
typedef boost::shared_ptr< ::project::ControllerMessage const> ControllerMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project::ControllerMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project::ControllerMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::project::ControllerMessage_<ContainerAllocator1> & lhs, const ::project::ControllerMessage_<ContainerAllocator2> & rhs)
{
  return lhs.gameWinner == rhs.gameWinner &&
    lhs.playerId == rhs.playerId &&
    lhs.setWinners == rhs.setWinners;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::project::ControllerMessage_<ContainerAllocator1> & lhs, const ::project::ControllerMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::project::ControllerMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project::ControllerMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project::ControllerMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project::ControllerMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project::ControllerMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project::ControllerMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project::ControllerMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc86e0b9b715baaa06fa102ece50366b";
  }

  static const char* value(const ::project::ControllerMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc86e0b9b715baaaULL;
  static const uint64_t static_value2 = 0x06fa102ece50366bULL;
};

template<class ContainerAllocator>
struct DataType< ::project::ControllerMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project/ControllerMessage";
  }

  static const char* value(const ::project::ControllerMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project::ControllerMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 gameWinner\n"
"int8 playerId\n"
"int8[] setWinners\n"
"\n"
"# Add more data type that comes out of GameController\n"
;
  }

  static const char* value(const ::project::ControllerMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project::ControllerMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gameWinner);
      stream.next(m.playerId);
      stream.next(m.setWinners);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project::ControllerMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project::ControllerMessage_<ContainerAllocator>& v)
  {
    s << indent << "gameWinner: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gameWinner);
    s << indent << "playerId: ";
    Printer<int8_t>::stream(s, indent + "  ", v.playerId);
    s << indent << "setWinners[]" << std::endl;
    for (size_t i = 0; i < v.setWinners.size(); ++i)
    {
      s << indent << "  setWinners[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.setWinners[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_MESSAGE_CONTROLLERMESSAGE_H
